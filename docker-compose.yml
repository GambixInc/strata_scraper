version: "3.8"

services:
  strata-scraper:
    build: .
    container_name: strata-scraper
    ports:
      - "8080:8080"
    environment:
      # Application Configuration
      - PORT=8080
      - HOST=0.0.0.0
      - DEBUG=False
      - FLASK_ENV=production
      
      # Database Configuration
      - DATABASE_TYPE=sqlite
      - DATABASE_PATH=/app/data/gambix_strata.db
      
      # Security Configuration
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - CORS_ORIGINS=${CORS_ORIGINS:-https://your-frontend-domain.com,http://localhost:3000}
      
      # Rate Limiting
      - RATE_LIMIT_STORAGE_URL=${RATE_LIMIT_STORAGE_URL:-memory://}
      
      # Logging Configuration
      - LOG_LEVEL=INFO
      - LOG_FILE=/app/logs/web_scraper.log
      
      # AWS Configuration (for future DynamoDB migration)
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      
      # MySQL Configuration (for future EC2 migration)
      - MYSQL_HOST=${MYSQL_HOST:-}
      - MYSQL_PORT=${MYSQL_PORT:-3306}
      - MYSQL_DATABASE=${MYSQL_DATABASE:-gambix_strata}
      - MYSQL_USER=${MYSQL_USER:-}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-}
      
      # Application Settings
      - MAX_CONTENT_LENGTH=16777216  # 16MB max file size
      - UPLOAD_FOLDER=/app/scraped_data
      - ALLOWED_EXTENSIONS=html,css,js,json,txt
      
      # Performance Settings
      - WORKER_PROCESSES=4
      - WORKER_CONNECTIONS=1000
      - KEEPALIVE_TIMEOUT=65
      
      # Monitoring
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
      - METRICS_PORT=${METRICS_PORT:-9090}
      
    volumes:
      # Mount logs directory for persistence
      - ./logs:/app/logs
      # Mount scraped data directory
      - ./scraped_data:/app/scraped_data
      # Mount database directory for persistence
      - ./data:/app/data
      # Mount optimized sites directory
      - ./optimized_sites:/app/optimized_sites
      # Mount configuration files
      - ./config:/app/config:ro
      
    restart: unless-stopped
    
    # Resource limits for production
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    profiles:
      - default
      - production

  # Optional: Redis for rate limiting and caching (for production)
  redis:
    image: redis:7-alpine
    container_name: strata-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - production

  # Optional: Nginx reverse proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: strata-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - strata-scraper
    restart: unless-stopped
    profiles:
      - production

  # Optional: Prometheus for metrics (for production)
  prometheus:
    image: prom/prometheus:latest
    container_name: strata-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles:
      - production

  # Optional: Grafana for dashboards (for production)
  grafana:
    image: grafana/grafana:latest
    container_name: strata-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    restart: unless-stopped
    profiles:
      - production

volumes:
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
